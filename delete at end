#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node*next;
};
void linkedlistTraversal(struct node*ptr){
    while(ptr!=NULL){
        printf("%d\n",ptr->data);
        ptr=ptr->next;
    }
}
// struct node*deleteFirst(struct node*head){
//     struct node*ptr=head;
//     head=head->next;
//     free(ptr);
//     return head;
// }
// struct node*deleteAtIndex(struct node*head,int index){
//     struct node*p=head;
//     struct node*q=head->next;
//     for(int i=0;i<index-1;i++){
//         p=p->next;
//         q=q->next;
//         p->next=q->next;
//         free(q);
//         return head;
//     }
// }
struct node*deleteAtEnd(struct node*head){
    struct node*p=head;
    struct node*q=p->next;
    while(q->next!=NULL){
        p=p->next;
        q=q->next;
    }
    p->next=NULL;
    free(q);
    return head;
}
int main(){
    struct node*head;
    struct node*second;
    struct node*third;
    struct node*fourth;
    head=(struct node*)malloc(sizeof(struct node));
      second=(struct node*)malloc(sizeof(struct node));
          third=(struct node*)malloc(sizeof(struct node));
             fourth=(struct node*)malloc(sizeof(struct node));
             head->data=7;
             head->next=second;
             second->data=13;
             second->next=third;
             third->data=20;
             third->next=fourth;
             fourth->data=27;
             fourth->next=NULL;
             printf("linked list before deletion\n");
             linkedlistTraversal(head);
             head=deleteAtEnd(head);
             printf("linked list after deletion\n");
             linkedlistTraversal(head);
             return 0;
             
    
}
